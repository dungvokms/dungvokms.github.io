[
  
   
      {
        "title"    : "Sending email using Spring Boot",
        "category" : "",
        "tags"     : " java, email, spring, spring-boot",
        "url"      : "/2018/09/17/sending-email-using-spring-boot.html",
        "date"     : "September 17, 2018",
        "excerpt"  : "<p><em>In this post, we will go to steps to configure sending email using Spring Boot and Gmail as the mail provider</em></p>\n\n<p>You can find the sample code at repo:\n<a href=\"https://github.com/dungvokms/demo-email-spring-boot\" target=\"_blank\">h...",
        "content"  : "<p><em>In this post, we will go to steps to configure sending email using Spring Boot and Gmail as the mail provider</em></p>\n\n<p>You can find the sample code at repo:\n<a href=\"https://github.com/dungvokms/demo-email-spring-boot\" target=\"_blank\">https://github.com/dungvokms/demo-email-spring-boot</a></p>\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n<ul id=\"markdown-toc\">\n  <li><a href=\"#table-of-contents\" id=\"markdown-toc-table-of-contents\">Table of contents</a></li>\n  <li><a href=\"#getting-started\" id=\"markdown-toc-getting-started\">Getting started</a></li>\n  <li><a href=\"#configure-applicationproperties\" id=\"markdown-toc-configure-applicationproperties\">Configure <code class=\"highlighter-rouge\">application.properties</code></a></li>\n  <li><a href=\"#lets-create-a-email-service-to-send-simple-messages\" id=\"markdown-toc-lets-create-a-email-service-to-send-simple-messages\">Let’s create a email service to send simple messages</a></li>\n  <li><a href=\"#lets-test-the-emailservice\" id=\"markdown-toc-lets-test-the-emailservice\">Let’s test the EmailService</a></li>\n  <li><a href=\"#conclusions\" id=\"markdown-toc-conclusions\">Conclusions</a></li>\n</ul>\n\n<h3 id=\"getting-started\">Getting started</h3>\n\n<ol>\n  <li>\n    <p>The first thing you need to do is allow Gmail to send emails from your app</p>\n\n    <p>Go to <a href=\"https://myaccount.google.com/lesssecureapps\" target=\"_blank\">https://myaccount.google.com/lesssecureapps</a></p>\n\n    <p><img src=\"/assets/img/email/less-secure-app.png\" alt=\"Turn on less secure\" /></p>\n\n    <blockquote>\n      <p><em>Please aware the security you are changing in this account</em></p>\n    </blockquote>\n  </li>\n  <li>\n    <p>Go to <a href=\"https://start.spring.io/\" target=\"_blank\">https://start.spring.io</a> to create the Spring Boot project, we only need <code class=\"highlighter-rouge\">Mail</code> dependency for now. And hit generate</p>\n\n    <p><img src=\"/assets/img/email/create-spring-project.png\" alt=\"Start Minio\" /></p>\n  </li>\n</ol>\n\n<h3 id=\"configure-applicationproperties\">Configure <code class=\"highlighter-rouge\">application.properties</code></h3>\n\n<p>Open file <code class=\"highlighter-rouge\">application.properties</code> and add these configurations:</p>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"py\">spring.mail.properties.mail.smtp.connectiontimeout</span><span class=\"p\">=</span><span class=\"s\">10000</span>\n<span class=\"py\">spring.mail.properties.mail.smtp.timeout</span><span class=\"p\">=</span><span class=\"s\">5000</span>\n<span class=\"py\">spring.mail.properties.mail.smtp.writetimeout</span><span class=\"p\">=</span><span class=\"s\">10000</span>\n<span class=\"py\">spring.mail.properties.mail.smtp.auth</span><span class=\"p\">=</span><span class=\"s\">true</span>\n<span class=\"py\">spring.mail.properties.mail.smtp.starttls.enable</span><span class=\"p\">=</span><span class=\"s\">true</span>\n<span class=\"py\">spring.mail.properties.mail.smtp.ssl.trust</span><span class=\"p\">=</span><span class=\"s\">smtp.gmail.com</span>\n<span class=\"py\">spring.mail.host</span><span class=\"p\">=</span><span class=\"s\">smtp.gmail.com</span>\n<span class=\"py\">spring.mail.port</span><span class=\"p\">=</span><span class=\"s\">587</span>\n<span class=\"py\">spring.mail.username</span><span class=\"p\">=</span><span class=\"s\">&lt;YOUR_GMAIL_USERNAME&gt;</span>\n<span class=\"py\">spring.mail.password</span><span class=\"p\">=</span><span class=\"s\">&lt;YOUR_GMAIL_PASSWORD&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"lets-create-a-email-service-to-send-simple-messages\">Let’s create a email service to send simple messages</h3>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">org.springframework.mail.SimpleMailMessage</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.mail.javamail.JavaMailSender</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.springframework.stereotype.Service</span><span class=\"o\">;</span>\n\n<span class=\"nd\">@Service</span>\n<span class=\"kd\">class</span> <span class=\"nc\">EmailService</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">JavaMailSender</span> <span class=\"n\">mailSender</span><span class=\"o\">;</span>\n\n    <span class=\"n\">EmailService</span><span class=\"o\">(</span><span class=\"n\">JavaMailSender</span> <span class=\"n\">mailSender</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">mailSender</span> <span class=\"o\">=</span> <span class=\"n\">mailSender</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">sendSimpleMessage</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">to</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">subject</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">text</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">SimpleMailMessage</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SimpleMailMessage</span><span class=\"o\">();</span>\n\n        <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">setTo</span><span class=\"o\">(</span><span class=\"n\">to</span><span class=\"o\">);</span>\n        <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">setSubject</span><span class=\"o\">(</span><span class=\"n\">subject</span><span class=\"o\">);</span>\n        <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"na\">setText</span><span class=\"o\">(</span><span class=\"n\">text</span><span class=\"o\">);</span>\n\n        <span class=\"n\">mailSender</span><span class=\"o\">.</span><span class=\"na\">send</span><span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"highlighter-rouge\">EmailService</code> is a component managed by Spring container through annotation <code class=\"highlighter-rouge\">@Service</code></p>\n\n<h3 id=\"lets-test-the-emailservice\">Let’s test the EmailService</h3>\n\n<p>I create an <code class=\"highlighter-rouge\">Initializer</code> class that extends from <code class=\"highlighter-rouge\">CommandLineRunner</code>. It uses EmailService to send a simple email.</p>\n\n<p>For example:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">class</span> <span class=\"nc\">Initializer</span> <span class=\"kd\">implements</span> <span class=\"n\">CommandLineRunner</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">EmailService</span> <span class=\"n\">emailService</span><span class=\"o\">;</span>\n\n    <span class=\"n\">Initializer</span><span class=\"o\">(</span><span class=\"n\">EmailService</span> <span class=\"n\">emailService</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">emailService</span> <span class=\"o\">=</span> <span class=\"n\">emailService</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">...</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"n\">emailService</span><span class=\"o\">.</span><span class=\"na\">sendSimpleMessage</span><span class=\"o\">(</span><span class=\"s\">\"vndung147@gmail.com\"</span><span class=\"o\">,</span> <span class=\"s\">\"Hello\"</span><span class=\"o\">,</span> <span class=\"s\">\"Just to say hi!!!\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n\n<p>That’s it.</p>\n\n<p>It is just a simple post to configure and send a simple email.</p>\n\n<p>In the next post, I will demonstrate how to use Mail with Thymeleaf to send a email with a specified template.</p>\n\n<p>You can find the sample code at <a href=\"&lt;https://github.com/dungvokms/demo-email-spring-boot&gt;\" target=\"_blank\">Github repo</a></p>\n"
      } ,
   
      {
        "title"    : "Seperate of concerns with Spring events and AOP",
        "category" : "",
        "tags"     : " java, aop, spring, coding-practices, events",
        "url"      : "/2018/09/15/seperate-of-concerns-with-spring-events-and-aop.html",
        "date"     : "September 15, 2018",
        "excerpt"  : "<p><em>Suppose that you want components in your system are loosely coupled. The results or actions of one component does not effect the others. For example, the component used for creating a user does not have any interventions with the component ...",
        "content"  : "<p><em>Suppose that you want components in your system are loosely coupled. The results or actions of one component does not effect the others. For example, the component used for creating a user does not have any interventions with the component used for sending user activation email.</em></p>\n\n<p><em>In that case you can use Spring event and Spring AOP to solve the problem. Let’s see how it works in this post</em></p>\n\n<p>You can find the sample code at repo: <a href=\"https://github.com/dungvokms/demo-events-and-aop\">https://github.com/dungvokms/demo-events-and-aop</a></p>\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n<ul id=\"markdown-toc\">\n  <li><a href=\"#table-of-contents\" id=\"markdown-toc-table-of-contents\">Table of contents</a></li>\n  <li><a href=\"#getting-started\" id=\"markdown-toc-getting-started\">Getting started</a></li>\n  <li><a href=\"#using-spring-events\" id=\"markdown-toc-using-spring-events\">Using Spring events</a></li>\n  <li><a href=\"#using-spring-aop\" id=\"markdown-toc-using-spring-aop\">Using Spring AOP</a></li>\n  <li><a href=\"#conclusions\" id=\"markdown-toc-conclusions\">Conclusions</a></li>\n</ul>\n\n<h3 id=\"getting-started\">Getting started</h3>\n\n<p>In this example, we will go though an example of creating a user and we will send an email to the user to activate the account. Obviously, we will have two services UserService and EmailService. Let’s look at the example code:</p>\n\n<p><code class=\"highlighter-rouge\">UserService.java</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">createUser</span><span class=\"o\">(</span><span class=\"n\">UserInfo</span> <span class=\"n\">userInfo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">User</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"o\">.</span><span class=\"na\">toUser</span><span class=\"o\">();</span>\n\n    <span class=\"c1\">// validate userInfo</span>\n    <span class=\"c1\">// save the user info to the database</span>\n\n    <span class=\"n\">emailService</span><span class=\"o\">.</span><span class=\"na\">sendActivationEmail</span><span class=\"o\">(</span><span class=\"n\">userInfo</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You can run the demo code at <a href=\"https://github.com/dungvokms/demo-events-and-aop\" target=\"_blank\">Github repo</a> and the output is:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;</span> Created user 5b420351-f419-4e2e-b5c9-d97eb3ba86ad\n<span class=\"o\">&gt;&gt;</span> Send email to user vnd@mail.com\n</code></pre></div></div>\n\n<p>In that case, you are creating coupling between UserService and EmailService. The UserService has to know about EmailService and calls send email after the user is created successfully. And when the EmailService changes its interface the UserService have to change too.</p>\n\n<h3 id=\"using-spring-events\">Using Spring events</h3>\n\n<p>To make it more loosely coupled, you can use event to solve this problem</p>\n\n<p>After saving the user info into the database, UserService will publish a user created event and anyone who is interested in that event can process the next step after user created. So the code will look something like this:</p>\n\n<p><code class=\"highlighter-rouge\">UserService.java</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">createUser</span><span class=\"o\">(</span><span class=\"n\">UserInfo</span> <span class=\"n\">userInfo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// validate userInfo</span>\n\n    <span class=\"c1\">// save the user info to the database</span>\n\n    <span class=\"n\">eventPublisher</span><span class=\"o\">.</span><span class=\"na\">publishEvent</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">UserCreatedEvent</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>After the user is created, the event publisher will be called to publish a UserCreatedEvent to notify all the listeners a new user is just created</p>\n\n<p><code class=\"highlighter-rouge\">EmailService.java</code> is a listener who is interested in UserCreatedEvent</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EmailService</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@EventListener</span><span class=\"o\">(</span><span class=\"n\">UserCreatedEvent</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">handleUserCreatedEvent</span><span class=\"o\">(</span><span class=\"n\">UserCreatedEvent</span> <span class=\"n\">event</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">send</span><span class=\"o\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">getObject</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">send</span><span class=\"o\">(</span><span class=\"n\">User</span> <span class=\"n\">user</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// send an email to user to activate the account</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The EmailService is always listen on the UserCreatedEvent and when someone publish that event (in this case is UserService) it will catch the event, retrieve the user from the event and send an email to that user to activate the account he/she just created</p>\n\n<p>At this step, you can stop at it, but if you want your business logic of creating a user don’t mix with any other logic like sending an email. And you might also notice that the publish event logic is not belongs to the create user logic</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">createUser</span><span class=\"o\">(</span><span class=\"n\">UserInfo</span> <span class=\"n\">userInfo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// validate userInfo</span>\n    <span class=\"c1\">// save the user info to the database</span>\n\n    <span class=\"c1\">// ==&gt; not belongs to user creating logic</span>\n    <span class=\"n\">eventPublisher</span><span class=\"o\">.</span><span class=\"na\">publishEvent</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">UserCreatedEvent</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">));</span>       \n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"using-spring-aop\">Using Spring AOP</h3>\n\n<p>So you can seperate it further by using Spring AOP. Aspect-Oriented Programming (AOP) enables modularization of cross-cutting concerns. For example, for logging you don’t need to have a log at every method, you can use AOP to centralize the logging logic in one place.</p>\n\n<p>To apply it the first one is to create an annotation to mark this method that it needs to send an event after it returns successfully</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"nd\">@interface</span> <span class=\"n\">EmailAfterReturning</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Create an handler class to handle <code class=\"highlighter-rouge\">@EmailAfterReturning</code> annotation</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Aspect</span>\n<span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EmailAnnotationHandler</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">EmailService</span> <span class=\"n\">emailService</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">EmailAnnotationHandler</span><span class=\"o\">(</span><span class=\"n\">EmailService</span> <span class=\"n\">emailService</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">emailService</span> <span class=\"o\">=</span> <span class=\"n\">emailService</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@AfterReturning</span><span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s\">\"@annotation(EmailAfterReturning)\"</span><span class=\"o\">,</span> <span class=\"n\">returning</span> <span class=\"o\">=</span> <span class=\"s\">\"retVal\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">handleSendingEmail</span><span class=\"o\">(</span><span class=\"n\">JoinPoint</span> <span class=\"n\">jp</span><span class=\"o\">,</span> <span class=\"n\">Object</span> <span class=\"n\">retVal</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">emailService</span><span class=\"o\">.</span><span class=\"na\">sendActivationEmail</span><span class=\"o\">((</span><span class=\"n\">User</span><span class=\"o\">)</span> <span class=\"n\">retVal</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>When having email annotation, you can use it to send an email after successfully creating an user:</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@EmailAfterReturning</span>\n<span class=\"kd\">public</span> <span class=\"n\">User</span> <span class=\"nf\">createUser</span><span class=\"o\">(</span><span class=\"n\">UserInfo</span> <span class=\"n\">userInfo</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// validate userInfo</span>\n    <span class=\"c1\">// save the user info to the database</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>After your new user is created successfully, an email will be send automatically. If an exception is thrown in the user creating logic code, there is no email will be sent.</p>\n\n<p>The demo code for AOP is at \n<a href=\"https://github.com/dungvokms/demo-events-and-aop/tree/aop\" target=\"_blank\">Github repo</a></p>\n\n<h3 id=\"conclusions\">Conclusions</h3>\n\n<p>So you can remove the coupling between the sending email logic and creating user logic. \nAnd the concerns of creating user and sending email is seperated.</p>\n\n<p>You can find the sample code at <a href=\"https://github.com/dungvokms/demo-events-and-aop\" target=\"_blank\">Github repo</a></p>\n"
      } ,
   
      {
        "title"    : "Guide to lombok",
        "category" : "",
        "tags"     : " java, lombok, boilerplate, coding-practices",
        "url"      : "/2018/09/10/guide-to-lombok.html",
        "date"     : "September 10, 2018",
        "excerpt"  : "<p><em>Have you ever heard Lombok?</em></p>\n\n<p><em>If you’ve worked in Java projects that have too many getters/setters and/or boilerplate code.</em></p>\n\n<p><em>Lombok is a great library to reduce boilerplate code in your project</em></p>\n\n<h3 i...",
        "content"  : "<p><em>Have you ever heard Lombok?</em></p>\n\n<p><em>If you’ve worked in Java projects that have too many getters/setters and/or boilerplate code.</em></p>\n\n<p><em>Lombok is a great library to reduce boilerplate code in your project</em></p>\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n<ul id=\"markdown-toc\">\n  <li><a href=\"#table-of-contents\" id=\"markdown-toc-table-of-contents\">Table of contents</a></li>\n  <li><a href=\"#how-to-start-with-it\" id=\"markdown-toc-how-to-start-with-it\">How to start with it?</a></li>\n  <li><a href=\"#1-val-var\" id=\"markdown-toc-1-val-var\">[1] Val, var</a></li>\n  <li><a href=\"#2-gettersetter\" id=\"markdown-toc-2-gettersetter\">[2] Getter/Setter</a></li>\n  <li><a href=\"#3-cleanup\" id=\"markdown-toc-3-cleanup\">[3] Cleanup</a></li>\n  <li><a href=\"#4-constructors\" id=\"markdown-toc-4-constructors\">[4] Constructors</a>    <ul>\n      <li><a href=\"#noargsconstructor\" id=\"markdown-toc-noargsconstructor\">@NoArgsConstructor</a></li>\n      <li><a href=\"#requiredargsconstructor\" id=\"markdown-toc-requiredargsconstructor\">@RequiredArgsConstructor</a></li>\n      <li><a href=\"#allargsconstructor\" id=\"markdown-toc-allargsconstructor\">@AllArgsConstructor</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#5-data\" id=\"markdown-toc-5-data\">[5] Data</a></li>\n  <li><a href=\"#6-log\" id=\"markdown-toc-6-log\">[6] Log</a></li>\n  <li><a href=\"#others\" id=\"markdown-toc-others\">Others</a></li>\n</ul>\n\n<h3 id=\"how-to-start-with-it\">How to start with it?</h3>\n\n<ol>\n  <li>\n    <p>A maven dependency (I will use Maven in this post, you can use Gradle as well)</p>\n\n    <div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nt\">&lt;dependency&gt;</span>\n     <span class=\"nt\">&lt;groupId&gt;</span>org.projectlombok<span class=\"nt\">&lt;/groupId&gt;</span>\n     <span class=\"nt\">&lt;artifactId&gt;</span>lombok<span class=\"nt\">&lt;/artifactId&gt;</span>\n     <span class=\"nt\">&lt;version&gt;</span>1.18.2<span class=\"nt\">&lt;/version&gt;</span>\n     <span class=\"nt\">&lt;scope&gt;</span>provided<span class=\"nt\">&lt;/scope&gt;</span>\n <span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>Lombok plugin in your IDE</p>\n  </li>\n</ol>\n\n<p><img src=\"/assets/img/lombok/install.jpeg\" alt=\"Install lombok plugin\" /></p>\n\n<h3 id=\"1-val-var\">[1] Val, var</h3>\n\n<p>If you know <strong>Kotlin</strong>, it is the same as <strong>val</strong> and <strong>var</strong> in Kotlin</p>\n\n<p>Java 10 also have the <strong>Local-Variable Type Inference</strong> with var</p>\n\n<p>Use <strong>val</strong> for final local variables (variables that are <strong>not changeable</strong>)</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">lombok.val</span><span class=\"o\">;</span>\n\n<span class=\"n\">val</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">;</span> <span class=\"c1\">// a is now int</span>\n \n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">11</span><span class=\"o\">;</span> <span class=\"c1\">// error, not changeable</span>\n</code></pre></div></div>\n\n<p>Use <strong>var</strong> for local variable ((variables that are <strong>changeable</strong>)</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">lombok.var</span><span class=\"o\">;</span>\n\n<span class=\"kt\">var</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span><span class=\"o\">;</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello there\"</span><span class=\"o\">;</span> <span class=\"c1\">// valid</span>\n \n<span class=\"c1\">// type is inferred</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">().</span><span class=\"na\">getSimpleName</span><span class=\"o\">());</span> <span class=\"c1\">// ==&gt; String</span>\n</code></pre></div></div>\n\n<h3 id=\"2-gettersetter\">[2] Getter/Setter</h3>\n\n<p>If you find that creating setters/getters is tedious and make the useless code</p>\n\n<p>Then Lombok can help you with that through <strong>@Getter</strong> and <strong>@Setter</strong></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Customer</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n \n    <span class=\"kd\">public</span> <span class=\"n\">Long</span> <span class=\"nf\">getId</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setId</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span> <span class=\"o\">}</span> \n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setName</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Can be replaced with</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Customer</span> <span class=\"o\">{</span>\n \n    <span class=\"nd\">@Getter</span>\n    <span class=\"nd\">@Setter</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n \n    <span class=\"nd\">@Getter</span>\n    <span class=\"nd\">@Setter</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n \n    <span class=\"c1\">// no longer setters and getters</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The example is just two fields, but in practice a class can probably contain 20 fields so using Lombok can help us a lot</p>\n\n<h3 id=\"3-cleanup\">[3] Cleanup</h3>\n\n<p>Have you ever create <code class=\"highlighter-rouge\">InputStream/OutputStream</code> and forgot to close them</p>\n\n<p>Or you get annoyed with <code class=\"highlighter-rouge\">try/catch/finally</code> block to close them</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">String</span> <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span><span class=\"o\">;</span>\n<span class=\"n\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n<span class=\"n\">OutputStream</span> <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n \n<span class=\"k\">try</span> <span class=\"o\">{</span>\n    <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"n\">greeting</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">());</span>\n    <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ByteArrayOutputStream</span><span class=\"o\">();</span>\n \n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">is</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">break</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>  <span class=\"c1\">// Hello</span>\n \n<span class=\"o\">}</span> <span class=\"k\">finally</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">is</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">os</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">close</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Lombok can call <code class=\"highlighter-rouge\">.close()</code> method for you at the end of the scope you are in</p>\n\n<p>Or whatever method name you’ve specified in <code class=\"highlighter-rouge\">@Cleanup</code>. For example <code class=\"highlighter-rouge\">@Cleanup(\"dispose\")</code></p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">String</span> <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s\">\"Hello\"</span><span class=\"o\">;</span>\n<span class=\"nd\">@Cleanup</span> <span class=\"n\">InputStream</span> <span class=\"n\">is</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"n\">greeting</span><span class=\"o\">.</span><span class=\"na\">getBytes</span><span class=\"o\">());</span>\n<span class=\"nd\">@Cleanup</span> <span class=\"n\">OutputStream</span> <span class=\"n\">os</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ByteArrayOutputStream</span><span class=\"o\">();</span>\n \n<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"n\">is</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">();</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">break</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> \n\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n\n<span class=\"c1\">// don't need to call close</span>\n</code></pre></div></div>\n\n<p>And your InputStream and OutputStream are closed.\nTo prove that @Cleanup is working, let’s see a simple example below</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CleanupWork</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"o\">{</span>\n            <span class=\"nd\">@Cleanup</span> <span class=\"n\">MustBeClosedService</span> <span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MustBeClosedService</span><span class=\"o\">();</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello service\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Ended\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n \n<span class=\"kd\">class</span> <span class=\"nc\">MustBeClosedService</span> <span class=\"kd\">implements</span> <span class=\"n\">AutoCloseable</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">close</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"MustBeClosedService closed\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&gt;&gt; Hello service\n&gt;&gt; MustBeClosedService closed\n&gt;&gt; Ended\n</code></pre></div></div>\n\n<p>Because MustBeClosedService has close() method so @Cleanup will call close after the scope</p>\n\n<h3 id=\"4-constructors\">[4] Constructors</h3>\n\n<h4 id=\"noargsconstructor\">@NoArgsConstructor</h4>\n\n<p>Have you ever write a no argument constructor like this</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Car</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">Car</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// do nothing here</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You can get rid of that constructor with</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@NoArgsConstructor</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nf\">Car</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"requiredargsconstructor\">@RequiredArgsConstructor</h4>\n\n<p>If you have final fields in your class, you have to have a constructor for these fields</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">RepositoryA</span> <span class=\"n\">repoA</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">RepositoryB</span> <span class=\"n\">repoB</span><span class=\"o\">;</span>\n \n    <span class=\"kd\">public</span> <span class=\"nf\">MyService</span><span class=\"o\">(</span><span class=\"n\">RepositoryA</span> <span class=\"n\">repoA</span><span class=\"o\">,</span> <span class=\"n\">RepositoryB</span> <span class=\"n\">repoB</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">repoA</span> <span class=\"o\">=</span> <span class=\"n\">repoA</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">repoB</span> <span class=\"o\">=</span> <span class=\"n\">repoB</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You can get rid of that constructor with</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@RequiredArgsConstructor</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MyService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">RepositoryA</span> <span class=\"n\">repoA</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">RepositoryB</span> <span class=\"n\">repoB</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"allargsconstructor\">@AllArgsConstructor</h4>\n\n<p>When a class with many fields and you want to have a constructor for all these fields, you will write the code like this</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">firstName</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">lastName</span><span class=\"o\">;</span>\n \n    <span class=\"kd\">public</span> <span class=\"nf\">Employee</span><span class=\"o\">(</span><span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">firstName</span><span class=\"o\">,</span> <span class=\"n\">String</span> <span class=\"n\">lastName</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">firstName</span> <span class=\"o\">=</span> <span class=\"n\">firstName</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">lastName</span> <span class=\"o\">=</span> <span class=\"n\">lastName</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You can get rid of that constructor with</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@AllArgsConstructor</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">firstName</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">lastName</span><span class=\"o\">;</span>\n\n    <span class=\"c1\">// other fields can be added without generate a new all arguments constructor</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>And when you add new fields into this class, you don’t need to change your constructor anymore as Lombok did it for you</p>\n\n<h3 id=\"5-data\">[5] Data</h3>\n\n<p>Have you ever feel bad about these useless getters and setters, toString, hashCode and, toString? It just returns things and set things. Moreover, the way we generate or create those things is very mechanical too.</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Employee</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">firstName</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">lastName</span><span class=\"o\">;</span>\n \n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"Employee{\"</span> <span class=\"o\">+</span>\n                <span class=\"s\">\"id=\"</span> <span class=\"o\">+</span> <span class=\"n\">id</span> <span class=\"o\">+</span>\n                <span class=\"s\">\", firstName='\"</span> <span class=\"o\">+</span> <span class=\"n\">firstName</span> <span class=\"o\">+</span> <span class=\"sc\">'\\''</span> <span class=\"o\">+</span>\n                <span class=\"s\">\", lastName='\"</span> <span class=\"o\">+</span> <span class=\"n\">lastName</span> <span class=\"o\">+</span> <span class=\"sc\">'\\''</span> <span class=\"o\">+</span>\n                <span class=\"sc\">'}'</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">equals</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"k\">this</span> <span class=\"o\">==</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">o</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"n\">getClass</span><span class=\"o\">()</span> <span class=\"o\">!=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"n\">Employee</span> <span class=\"n\">employee</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">Employee</span><span class=\"o\">)</span> <span class=\"n\">o</span><span class=\"o\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"na\">id</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n                <span class=\"n\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">firstName</span><span class=\"o\">,</span> <span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"na\">firstName</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span>\n                <span class=\"n\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">lastName</span><span class=\"o\">,</span> <span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"na\">lastName</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">hashCode</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">Objects</span><span class=\"o\">.</span><span class=\"na\">hash</span><span class=\"o\">(</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">firstName</span><span class=\"o\">,</span> <span class=\"n\">lastName</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>With Lombok, you can remove these from your code with one simple annotation @Data</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Data</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">EmployeeLombok</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Long</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">firstName</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">lastName</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>And then all getters and setters, toString, equals, hashCode, required arguments constructors is auto-generated for you.</p>\n\n<h3 id=\"6-log\">[6] Log</h3>\n\n<p>When you have a service class and you want to have logging for this class, you have to do this</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">CustomerService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"n\">Logger</span> <span class=\"n\">LOG</span> <span class=\"o\">=</span> <span class=\"n\">LoggerFactory</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">(</span><span class=\"n\">CustomerService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">);</span>\n \n    <span class=\"kd\">public</span> <span class=\"n\">Customer</span> <span class=\"nf\">createCustomer</span><span class=\"o\">(</span><span class=\"n\">CustomerDto</span> <span class=\"n\">dto</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Customer</span> <span class=\"n\">newCustomer</span> <span class=\"o\">=</span> <span class=\"n\">dto</span><span class=\"o\">.</span><span class=\"na\">toCustomer</span><span class=\"o\">();</span>\n \n        <span class=\"c1\">// validate and create a customer</span>\n \n        <span class=\"n\">LOG</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Customer created {}\"</span><span class=\"o\">,</span> <span class=\"n\">newCustomer</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">newCustomer</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>So with Lombok, you don’t need to initialize the logger anymore</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Slf4j</span>\n<span class=\"kd\">class</span> <span class=\"nc\">CustomerService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"n\">Customer</span> <span class=\"nf\">createCustomer</span><span class=\"o\">(</span><span class=\"n\">CustomerDto</span> <span class=\"n\">dto</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Customer</span> <span class=\"n\">newCustomer</span> <span class=\"o\">=</span> <span class=\"n\">dto</span><span class=\"o\">.</span><span class=\"na\">toCustomer</span><span class=\"o\">();</span>\n \n        <span class=\"c1\">// validate and create a customer</span>\n \n        <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"na\">info</span><span class=\"o\">(</span><span class=\"s\">\"Customer created {}\"</span><span class=\"o\">,</span> <span class=\"n\">newCustomer</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">newCustomer</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>So just declare <code class=\"highlighter-rouge\">@Slf4J</code> or <code class=\"highlighter-rouge\">@Log</code> on the class and you can use the log</p>\n\n<h3 id=\"others\">Others</h3>\n\n<p>You can see all the examples at \n<a href=\"https://github.com/dungvokms/demo-lombok\" target=\"_blank\">Git repo</a></p>\n\n<p>And many more features, you can refer to it in the link\n<a href=\"https://projectlombok.org/\" target=\"_blank\">Lombok</a></p>\n\n"
      } ,
   
      {
        "title"    : "Manage files with Spring Boot and Minio (compatible with Amazon S3 APIs)",
        "category" : "",
        "tags"     : " api, java, spring, spring-boot, minio, storage",
        "url"      : "/2018/08/26/manage-files-with-spring-boot-and-minio.html",
        "date"     : "August 26, 2018",
        "excerpt"  : "<p><em>In this post, we will go steps by steps from how to create a spring boot project, setup Minio, to using it to store files.</em></p>\n\n<p>You can find the sample code at the repo: <a href=\"https://github.com/dungvokms/demo-minio\">https://gith...",
        "content"  : "<p><em>In this post, we will go steps by steps from how to create a spring boot project, setup Minio, to using it to store files.</em></p>\n\n<p>You can find the sample code at the repo: <a href=\"https://github.com/dungvokms/demo-minio\">https://github.com/dungvokms/demo-minio</a></p>\n\n<h3 id=\"table-of-contents\">Table of contents</h3>\n\n<ul id=\"markdown-toc\">\n  <li><a href=\"#table-of-contents\" id=\"markdown-toc-table-of-contents\">Table of contents</a></li>\n  <li><a href=\"#what-is-minio\" id=\"markdown-toc-what-is-minio\">What is Minio?</a>    <ul>\n      <li><a href=\"#example-1-create-a-minio-client\" id=\"markdown-toc-example-1-create-a-minio-client\">Example 1: Create a minio client</a></li>\n      <li><a href=\"#example-2-create-a-aws-s3-client\" id=\"markdown-toc-example-2-create-a-aws-s3-client\">Example 2: Create a AWS S3 client</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#install-minio\" id=\"markdown-toc-install-minio\">Install Minio</a></li>\n  <li><a href=\"#create-a-spring-boot-project\" id=\"markdown-toc-create-a-spring-boot-project\">Create a Spring Boot project</a></li>\n  <li><a href=\"#minio-dependency\" id=\"markdown-toc-minio-dependency\">Minio dependency</a></li>\n  <li><a href=\"#create-the-project-structure\" id=\"markdown-toc-create-the-project-structure\">Create the project structure</a>    <ul>\n      <li><a href=\"#lets-edit-the-applicationproperties-file\" id=\"markdown-toc-lets-edit-the-applicationproperties-file\">Let’s edit the <code class=\"highlighter-rouge\">application.properties</code> file</a></li>\n      <li><a href=\"#appconfig\" id=\"markdown-toc-appconfig\">AppConfig</a></li>\n      <li><a href=\"#fileapi\" id=\"markdown-toc-fileapi\">FileApi</a></li>\n      <li><a href=\"#upload-api\" id=\"markdown-toc-upload-api\">Upload Api</a></li>\n      <li><a href=\"#download-api\" id=\"markdown-toc-download-api\">Download Api</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#run-the-code\" id=\"markdown-toc-run-the-code\">Run the code</a>    <ul>\n      <li><a href=\"#upload-file\" id=\"markdown-toc-upload-file\">Upload file</a></li>\n      <li><a href=\"#download-the-uploaded-file\" id=\"markdown-toc-download-the-uploaded-file\">Download the uploaded file</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li>\n</ul>\n\n<h3 id=\"what-is-minio\">What is Minio?</h3>\n\n<p>Minio is an object storage server released under Apache License v2.0. it is compatible with Amazon S3 cloud storage service. It is best suited for storing unstructured data such as photos, videos, log files, backups and container / VM images. Size of an object can range from a few KBs to a maximum of 5TB.</p>\n\n<p>For more information: <a href=\"https://docs.minio.io\">https://docs.minio.io</a></p>\n\n<h4 id=\"example-1-create-a-minio-client\">Example 1: Create a minio client</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">MinioClient</span> <span class=\"n\">minioClient</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MinioClient</span><span class=\"o\">(</span><span class=\"s\">\"https://play.minio.io:9000\"</span><span class=\"o\">,</span> <span class=\"s\">\"Q3AM3UQ867SPQQA43P2F\"</span><span class=\"o\">,</span> <span class=\"s\">\"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<h4 id=\"example-2-create-a-aws-s3-client\">Example 2: Create a AWS S3 client</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">MinioClient</span> <span class=\"n\">s3Client</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">MinioClient</span><span class=\"o\">(</span><span class=\"s\">\"https://s3.amazonaws.com\"</span><span class=\"o\">,</span> <span class=\"s\">\"YOUR-ACCESSKEYID\"</span><span class=\"o\">,</span> <span class=\"s\">\"YOUR-SECRETACCESSKEY\"</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>Minio provides an abstract API for working with server storage as well as AWS S3 storage.</p>\n\n<h3 id=\"install-minio\">Install Minio</h3>\n\n<p>You can setup Minio easily using Docker, Homebrew (for Mac), Window, etc. Please refer to this link for setting up: <a href=\"https://docs.minio.io/docs/minio-quickstart-guide\">https://docs.minio.io/docs/minio-quickstart-guide</a></p>\n\n<p>On MacOS, after installing Minio, you can start minio server by using: <code class=\"highlighter-rouge\">minio server &lt;YOUR_PATH&gt;</code></p>\n\n<p>For example: <code class=\"highlighter-rouge\">minio server ./minio/</code></p>\n\n<p>Once you have done you can access <a href=\"http://localhost:9000\">http://localhost:9000</a> (default port is 9000)</p>\n\n<p><img src=\"/assets/img/minio/localhost-default.png\" alt=\"Default Minio\" /></p>\n\n<h3 id=\"create-a-spring-boot-project\">Create a Spring Boot project</h3>\n\n<p>We can create a spring boot project simply by using <a href=\"http://start.spring.io\">http://start.spring.io</a>.</p>\n\n<p>We only need web and lombok (Optional) (<a href=\"https://projectlombok.org\">https://projectlombok.org</a>) for now.</p>\n\n<blockquote>\n  <p>Lombok is a great library to reduce boilerplates in your code.</p>\n</blockquote>\n\n<p>You can read more about Lombok at <a href=\"/2018/09/10/guide-to-lombok.html\">this post</a></p>\n\n<p>For more information about building an application with Spring Boot: <a href=\"https://spring.io/guides/gs/spring-boot\">https://spring.io/guides/gs/spring-boot</a></p>\n\n<p><img src=\"/assets/img/minio/spring-boot-new.png\" alt=\"New Spring Boot\" /></p>\n\n<p>And hit the button <strong>Generate project</strong></p>\n\n<h3 id=\"minio-dependency\">Minio dependency</h3>\n\n<p>Open <code class=\"highlighter-rouge\">pom.xml</code> file and add this dependency to <code class=\"highlighter-rouge\">&lt;dependencies&gt;</code></p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>io.minio<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>minio<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>4.0.1<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"create-the-project-structure\">Create the project structure</h3>\n\n<p>We will build simple APIs that support for uploading and downloading files so the first one we need is FileApi. We also need to configure the application storage host, access key, secret key as well.</p>\n\n<p><img src=\"/assets/img/minio/project-structure.png\" alt=\"Project Structure\" /></p>\n\n<table>\n  <thead>\n    <tr>\n      <th>File</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>FileApi</td>\n      <td>will receive upload/download requests</td>\n    </tr>\n    <tr>\n      <td>AppConfig</td>\n      <td>is for configuring Minio client</td>\n    </tr>\n    <tr>\n      <td>DemoMinioApplication</td>\n      <td>is the entry point of a spring boot project</td>\n    </tr>\n    <tr>\n      <td>application.properties</td>\n      <td>will contain the configuration of the application</td>\n    </tr>\n  </tbody>\n</table>\n\n<p>When starting the Minio server it will provide you the <strong>accessKey</strong> and <strong>secretKey</strong> generated if you don’t set it.</p>\n\n<p><img src=\"/assets/img/minio/start-minio.png\" alt=\"Start Minio\" /></p>\n\n<h4 id=\"lets-edit-the-applicationproperties-file\">Let’s edit the <code class=\"highlighter-rouge\">application.properties</code> file</h4>\n\n<div class=\"language-properties highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"py\">app.minio.host</span><span class=\"p\">=</span><span class=\"s\">http://localhost:9000</span>\n<span class=\"c\"># CHANGE TO YOUR KEYS\n</span><span class=\"py\">app.minio.accessKey</span><span class=\"p\">=</span><span class=\"s\">WY2BFC1KHNFSEIJ0L0NC</span>\n<span class=\"py\">app.minio.secretKey</span><span class=\"p\">=</span><span class=\"s\">UXK/+Xe09gnUhk7d+oFdqxr1AUVPkGUPczY5aFKq</span>\n</code></pre></div></div>\n\n<h4 id=\"appconfig\">AppConfig</h4>\n\n<p>It’s now to configure Minio Client</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@Configuration</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">AppConfig</span> <span class=\"o\">{</span>\n \n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${app.minio.host}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">minioHost</span><span class=\"o\">;</span>\n \n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${app.minio.accessKey}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">minioAccessKey</span><span class=\"o\">;</span>\n \n    <span class=\"nd\">@Value</span><span class=\"o\">(</span><span class=\"s\">\"${app.minio.secretKey}\"</span><span class=\"o\">)</span>\n    <span class=\"kd\">private</span> <span class=\"n\">String</span> <span class=\"n\">minioSecretKey</span><span class=\"o\">;</span>\n \n    <span class=\"nd\">@Bean</span>\n    <span class=\"kd\">public</span> <span class=\"n\">MinioClient</span> <span class=\"nf\">minioClient</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"n\">InvalidPortException</span><span class=\"o\">,</span> <span class=\"n\">InvalidEndpointException</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">MinioClient</span><span class=\"o\">(</span><span class=\"n\">minioHost</span><span class=\"o\">,</span> <span class=\"n\">minioAccessKey</span><span class=\"o\">,</span> <span class=\"n\">minioSecretKey</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"c1\">// getters</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>With this config, the MinioClient will be managed by Spring Container so we can easily inject it into other beans when we need.</p>\n\n<h4 id=\"fileapi\">FileApi</h4>\n\n<p>FileApi will need MinioClient so we will inject it into the FileApi</p>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@RestController</span>\n<span class=\"nd\">@RequestMapping</span><span class=\"o\">(</span><span class=\"s\">\"/files\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FileApi</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">MinioClient</span> <span class=\"n\">minioClient</span><span class=\"o\">;</span>\n \n    <span class=\"kd\">public</span> <span class=\"nf\">FileApi</span><span class=\"o\">(</span><span class=\"n\">MinioClient</span> <span class=\"n\">minioClient</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">minioClient</span> <span class=\"o\">=</span> <span class=\"n\">minioClient</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n \n    <span class=\"c1\">// uploading file API</span>\n    <span class=\"c1\">// downloading file API</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>When we have only a constructor we don’t need to use <code class=\"highlighter-rouge\">@Autowired</code>. Spring will automatically inject dependencies for us.</p>\n</blockquote>\n\n<h4 id=\"upload-api\">Upload Api</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@PostMapping</span><span class=\"o\">(</span><span class=\"s\">\"/{bucketName}\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">uploadFile</span><span class=\"o\">(</span><span class=\"nd\">@PathVariable</span><span class=\"o\">(</span><span class=\"err\">“</span><span class=\"n\">bucketName</span><span class=\"s\">\") String bucketName,\n                       @RequestParam(“objectName\"</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">objectName</span><span class=\"o\">,</span>\n                       <span class=\"nd\">@RequestParam</span><span class=\"o\">(</span><span class=\"s\">\"file\"</span><span class=\"o\">)</span> <span class=\"n\">MultipartFile</span> <span class=\"n\">file</span><span class=\"o\">)</span> \n<span class=\"kd\">throws</span> <span class=\"n\">IOException</span><span class=\"o\">,</span> <span class=\"n\">InvalidKeyException</span><span class=\"o\">,</span> <span class=\"n\">NoSuchAlgorithmException</span><span class=\"o\">,</span> <span class=\"n\">InsufficientDataException</span><span class=\"o\">,</span> \n       <span class=\"n\">InvalidArgumentException</span><span class=\"o\">,</span> <span class=\"n\">InternalException</span><span class=\"o\">,</span>  <span class=\"n\">NoResponseException</span><span class=\"o\">,</span> \n       <span class=\"n\">InvalidBucketNameException</span><span class=\"o\">,</span> <span class=\"n\">XmlPullParserException</span><span class=\"o\">,</span> <span class=\"n\">ErrorResponseException</span> <span class=\"o\">{</span>\n \n    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">minioClient</span><span class=\"o\">.</span><span class=\"na\">bucketExists</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n        <span class=\"n\">minioClient</span><span class=\"o\">.</span><span class=\"na\">makeBucket</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">minioClient</span><span class=\"o\">.</span><span class=\"na\">putObject</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">,</span> <span class=\"n\">objectName</span><span class=\"o\">,</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">getInputStream</span><span class=\"o\">(),</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">getContentType</span><span class=\"o\">());</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>This API will create a bucket if it not exists and then it will put the file into a <code class=\"highlighter-rouge\">bucketName</code> and assign a name to it through the parameter <code class=\"highlighter-rouge\">objectName</code></p>\n\n<h4 id=\"download-api\">Download Api</h4>\n\n<div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nd\">@GetMapping</span><span class=\"o\">(</span><span class=\"s\">\"{bucketName}/**\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"n\">ResponseEntity</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&gt;</span> <span class=\"nf\">downloadFile</span><span class=\"o\">(</span><span class=\"nd\">@PathVariable</span><span class=\"o\">(</span><span class=\"s\">\"bucketName\"</span><span class=\"o\">)</span> <span class=\"n\">String</span> <span class=\"n\">bucketName</span><span class=\"o\">,</span>                                             <span class=\"n\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">)</span>\n        <span class=\"kd\">throws</span> <span class=\"n\">IOException</span><span class=\"o\">,</span> <span class=\"n\">InvalidKeyException</span><span class=\"o\">,</span> <span class=\"n\">NoSuchAlgorithmException</span><span class=\"o\">,</span> \n               <span class=\"n\">InsufficientDataException</span><span class=\"o\">,</span> <span class=\"n\">InvalidArgumentException</span><span class=\"o\">,</span> <span class=\"n\">InternalException</span><span class=\"o\">,</span> \n               <span class=\"n\">NoResponseException</span><span class=\"o\">,</span> <span class=\"n\">InvalidBucketNameException</span><span class=\"o\">,</span> <span class=\"n\">XmlPullParserException</span><span class=\"o\">,</span> \n               <span class=\"n\">ErrorResponseException</span> <span class=\"o\">{</span>\n \n    <span class=\"n\">String</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"n\">HandlerMapping</span><span class=\"o\">.</span><span class=\"na\">PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE</span><span class=\"o\">));</span>\n    <span class=\"n\">String</span> <span class=\"n\">objectName</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">bucketName</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n    <span class=\"n\">InputStream</span> <span class=\"n\">objectStream</span> <span class=\"o\">=</span> <span class=\"n\">minioClient</span><span class=\"o\">.</span><span class=\"na\">getObject</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">,</span> <span class=\"n\">objectName</span><span class=\"o\">);</span>    \n    <span class=\"n\">String</span> <span class=\"n\">fileName</span> <span class=\"o\">=</span> <span class=\"n\">objectName</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">objectName</span><span class=\"o\">.</span><span class=\"na\">lastIndexOf</span><span class=\"o\">(</span><span class=\"sc\">'/'</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n \n    <span class=\"k\">return</span> <span class=\"n\">ResponseEntity</span><span class=\"o\">.</span><span class=\"na\">ok</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">contentType</span><span class=\"o\">(</span><span class=\"n\">MediaType</span><span class=\"o\">.</span><span class=\"na\">IMAGE_JPEG</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">header</span><span class=\"o\">(</span><span class=\"n\">HttpHeaders</span><span class=\"o\">.</span><span class=\"na\">CONTENT_DISPOSITION</span><span class=\"o\">,</span> <span class=\"s\">\"attachment; filename=\"</span> <span class=\"o\">+</span> <span class=\"n\">fileName</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">body</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">InputStreamResource</span><span class=\"o\">(</span><span class=\"n\">objectStream</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>The line</p>\n  <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">String</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getAttribute</span><span class=\"o\">(</span><span class=\"n\">HandlerMapping</span><span class=\"o\">.</span><span class=\"na\">PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE</span><span class=\"o\">));</span>\n</code></pre></div>  </div>\n  <p>will get the request path for example, <code class=\"highlighter-rouge\">/files/vnd/pic1</code> in this case, the object name is <code class=\"highlighter-rouge\">pic1</code> and bucket name is <code class=\"highlighter-rouge\">vnd</code></p>\n</blockquote>\n\n<blockquote>\n  <p>The next line will extract the object name from the request path</p>\n  <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">String</span> <span class=\"n\">objectName</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">indexOf</span><span class=\"o\">(</span><span class=\"n\">bucketName</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"n\">bucketName</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<blockquote>\n  <p>The following next lines are used to download the file from the minio server</p>\n</blockquote>\n\n<h3 id=\"run-the-code\">Run the code</h3>\n\n<p>Let’s access the minio server <a href=\"http://localhost:9000/minio\">http://localhost:9000/minio</a> and create a bucket named <vnd></vnd></p>\n\n<p><img src=\"/assets/img/minio/create-bucket.png\" alt=\"Create a bucket\" /></p>\n\n<h4 id=\"upload-file\">Upload file</h4>\n\n<p>You can use Postman to test the upload API. In this case, I will upload a file in bucketName <code class=\"highlighter-rouge\">vnd</code> and objectName <code class=\"highlighter-rouge\">pic1</code></p>\n\n<p><img src=\"/assets/img/minio/upload-file.png\" alt=\"Upload file\" /></p>\n\n<p>The result</p>\n\n<p><img src=\"/assets/img/minio/upload-result.png\" alt=\"Upload result\" /></p>\n\n<h4 id=\"download-the-uploaded-file\">Download the uploaded file</h4>\n\n<p>Download a file in the bucket named <code class=\"highlighter-rouge\">vnd</code> and object named <code class=\"highlighter-rouge\">pic1</code></p>\n\n<p><img src=\"/assets/img/minio/download-file.png\" alt=\"Download file\" /></p>\n\n<h3 id=\"conclusion\">Conclusion</h3>\n\n<p>That’s all you need to set up and configure the minio and build a spring application to manage your files.</p>\n\n<p>You can find the source code at <a href=\"https://github.com/dungvokms/demo-minio\" target=\"_blank\">Git repo</a></p>\n\n"
      } 
   
   
   
  
]